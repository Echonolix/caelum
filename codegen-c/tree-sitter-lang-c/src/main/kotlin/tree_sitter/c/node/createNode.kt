package tree_sitter.c.node

import tree_sitter.Node

public fun createNode(node: Node): CNodeBase {
    if (!node.isNamed) {
        return CNodeBase.Unnamed(node)
    }
    return when (node.kindID) {
        TSCLanguage.Lang._abstract_declarator -> _AbstractDeclaratorNode(node)
        TSCLanguage.Lang._declarator -> _DeclaratorNode(node)
        TSCLanguage.Lang._field_declarator -> _FieldDeclaratorNode(node)
        TSCLanguage.Lang._type_declarator -> _TypeDeclaratorNode(node)
        TSCLanguage.Lang.expression -> ExpressionNode(node)
        TSCLanguage.Lang.statement -> StatementNode(node)
        TSCLanguage.Lang.type_specifier -> TypeSpecifierNode(node)
        TSCLanguage.Lang.abstract_array_declarator -> AbstractArrayDeclaratorNode(node)
        TSCLanguage.Lang.abstract_function_declarator -> AbstractFunctionDeclaratorNode(node)
        TSCLanguage.Lang.abstract_parenthesized_declarator -> AbstractParenthesizedDeclaratorNode(node)
        TSCLanguage.Lang.abstract_pointer_declarator -> AbstractPointerDeclaratorNode(node)
        TSCLanguage.Lang.alignas_qualifier -> AlignasQualifierNode(node)
        TSCLanguage.Lang.alignof_expression -> AlignofExpressionNode(node)
        TSCLanguage.Lang.argument_list -> ArgumentListNode(node)
        TSCLanguage.Lang.array_declarator -> ArrayDeclaratorNode(node)
        TSCLanguage.Lang.assignment_expression -> AssignmentExpressionNode(node)
        TSCLanguage.Lang.attribute -> AttributeNode(node)
        TSCLanguage.Lang.attribute_declaration -> AttributeDeclarationNode(node)
        TSCLanguage.Lang.attribute_specifier -> AttributeSpecifierNode(node)
        TSCLanguage.Lang.attributed_declarator -> AttributedDeclaratorNode(node)
        TSCLanguage.Lang.attributed_statement -> AttributedStatementNode(node)
        TSCLanguage.Lang.binary_expression -> BinaryExpressionNode(node)
        TSCLanguage.Lang.bitfield_clause -> BitfieldClauseNode(node)
        TSCLanguage.Lang.break_statement -> BreakStatementNode(node)
        TSCLanguage.Lang.call_expression -> CallExpressionNode(node)
        TSCLanguage.Lang.case_statement -> CaseStatementNode(node)
        TSCLanguage.Lang.cast_expression -> CastExpressionNode(node)
        TSCLanguage.Lang.char_literal -> CharLiteralNode(node)
        TSCLanguage.Lang.comma_expression -> CommaExpressionNode(node)
        TSCLanguage.Lang.compound_literal_expression -> CompoundLiteralExpressionNode(node)
        TSCLanguage.Lang.compound_statement -> CompoundStatementNode(node)
        TSCLanguage.Lang.concatenated_string -> ConcatenatedStringNode(node)
        TSCLanguage.Lang.conditional_expression -> ConditionalExpressionNode(node)
        TSCLanguage.Lang.continue_statement -> ContinueStatementNode(node)
        TSCLanguage.Lang.declaration -> DeclarationNode(node)
        TSCLanguage.Lang.declaration_list -> DeclarationListNode(node)
        TSCLanguage.Lang.do_statement -> DoStatementNode(node)
        TSCLanguage.Lang.else_clause -> ElseClauseNode(node)
        TSCLanguage.Lang.enum_specifier -> EnumSpecifierNode(node)
        TSCLanguage.Lang.enumerator -> EnumeratorNode(node)
        TSCLanguage.Lang.enumerator_list -> EnumeratorListNode(node)
        TSCLanguage.Lang.expression_statement -> ExpressionStatementNode(node)
        TSCLanguage.Lang.extension_expression -> ExtensionExpressionNode(node)
        TSCLanguage.Lang.field_declaration -> FieldDeclarationNode(node)
        TSCLanguage.Lang.field_declaration_list -> FieldDeclarationListNode(node)
        TSCLanguage.Lang.field_designator -> FieldDesignatorNode(node)
        TSCLanguage.Lang.field_expression -> FieldExpressionNode(node)
        TSCLanguage.Lang.for_statement -> ForStatementNode(node)
        TSCLanguage.Lang.function_declarator -> FunctionDeclaratorNode(node)
        TSCLanguage.Lang.function_definition -> FunctionDefinitionNode(node)
        TSCLanguage.Lang.generic_expression -> GenericExpressionNode(node)
        TSCLanguage.Lang.gnu_asm_clobber_list -> GnuAsmClobberListNode(node)
        TSCLanguage.Lang.gnu_asm_expression -> GnuAsmExpressionNode(node)
        TSCLanguage.Lang.gnu_asm_goto_list -> GnuAsmGotoListNode(node)
        TSCLanguage.Lang.gnu_asm_input_operand -> GnuAsmInputOperandNode(node)
        TSCLanguage.Lang.gnu_asm_input_operand_list -> GnuAsmInputOperandListNode(node)
        TSCLanguage.Lang.gnu_asm_output_operand -> GnuAsmOutputOperandNode(node)
        TSCLanguage.Lang.gnu_asm_output_operand_list -> GnuAsmOutputOperandListNode(node)
        TSCLanguage.Lang.gnu_asm_qualifier -> GnuAsmQualifierNode(node)
        TSCLanguage.Lang.goto_statement -> GotoStatementNode(node)
        TSCLanguage.Lang.if_statement -> IfStatementNode(node)
        TSCLanguage.Lang.init_declarator -> InitDeclaratorNode(node)
        TSCLanguage.Lang.initializer_list -> InitializerListNode(node)
        TSCLanguage.Lang.initializer_pair -> InitializerPairNode(node)
        TSCLanguage.Lang.labeled_statement -> LabeledStatementNode(node)
        TSCLanguage.Lang.linkage_specification -> LinkageSpecificationNode(node)
        TSCLanguage.Lang.macro_type_specifier -> MacroTypeSpecifierNode(node)
        TSCLanguage.Lang.ms_based_modifier -> MsBasedModifierNode(node)
        TSCLanguage.Lang.ms_call_modifier -> MsCallModifierNode(node)
        TSCLanguage.Lang.ms_declspec_modifier -> MsDeclspecModifierNode(node)
        TSCLanguage.Lang.ms_pointer_modifier -> MsPointerModifierNode(node)
        TSCLanguage.Lang.ms_unaligned_ptr_modifier -> MsUnalignedPtrModifierNode(node)
        TSCLanguage.Lang.`null` -> NullNode(node)
        TSCLanguage.Lang.offsetof_expression -> OffsetofExpressionNode(node)
        TSCLanguage.Lang.parameter_declaration -> ParameterDeclarationNode(node)
        TSCLanguage.Lang.parameter_list -> ParameterListNode(node)
        TSCLanguage.Lang.parenthesized_declarator -> ParenthesizedDeclaratorNode(node)
        TSCLanguage.Lang.parenthesized_expression -> ParenthesizedExpressionNode(node)
        TSCLanguage.Lang.pointer_declarator -> PointerDeclaratorNode(node)
        TSCLanguage.Lang.pointer_expression -> PointerExpressionNode(node)
        TSCLanguage.Lang.preproc_call -> PreprocCallNode(node)
        TSCLanguage.Lang.preproc_def -> PreprocDefNode(node)
        TSCLanguage.Lang.preproc_defined -> PreprocDefinedNode(node)
        TSCLanguage.Lang.preproc_elif -> PreprocElifNode(node)
        TSCLanguage.Lang.preproc_elifdef -> PreprocElifdefNode(node)
        TSCLanguage.Lang.preproc_else -> PreprocElseNode(node)
        TSCLanguage.Lang.preproc_function_def -> PreprocFunctionDefNode(node)
        TSCLanguage.Lang.preproc_if -> PreprocIfNode(node)
        TSCLanguage.Lang.preproc_ifdef -> PreprocIfdefNode(node)
        TSCLanguage.Lang.preproc_include -> PreprocIncludeNode(node)
        TSCLanguage.Lang.preproc_params -> PreprocParamsNode(node)
        TSCLanguage.Lang.return_statement -> ReturnStatementNode(node)
        TSCLanguage.Lang.seh_except_clause -> SehExceptClauseNode(node)
        TSCLanguage.Lang.seh_finally_clause -> SehFinallyClauseNode(node)
        TSCLanguage.Lang.seh_leave_statement -> SehLeaveStatementNode(node)
        TSCLanguage.Lang.seh_try_statement -> SehTryStatementNode(node)
        TSCLanguage.Lang.sized_type_specifier -> SizedTypeSpecifierNode(node)
        TSCLanguage.Lang.sizeof_expression -> SizeofExpressionNode(node)
        TSCLanguage.Lang.storage_class_specifier -> StorageClassSpecifierNode(node)
        TSCLanguage.Lang.string_literal -> StringLiteralNode(node)
        TSCLanguage.Lang.struct_specifier -> StructSpecifierNode(node)
        TSCLanguage.Lang.subscript_designator -> SubscriptDesignatorNode(node)
        TSCLanguage.Lang.subscript_expression -> SubscriptExpressionNode(node)
        TSCLanguage.Lang.subscript_range_designator -> SubscriptRangeDesignatorNode(node)
        TSCLanguage.Lang.switch_statement -> SwitchStatementNode(node)
        TSCLanguage.Lang.translation_unit -> TranslationUnitNode(node)
        TSCLanguage.Lang.type_definition -> TypeDefinitionNode(node)
        TSCLanguage.Lang.type_descriptor -> TypeDescriptorNode(node)
        TSCLanguage.Lang.type_qualifier -> TypeQualifierNode(node)
        TSCLanguage.Lang.unary_expression -> UnaryExpressionNode(node)
        TSCLanguage.Lang.union_specifier -> UnionSpecifierNode(node)
        TSCLanguage.Lang.update_expression -> UpdateExpressionNode(node)
        TSCLanguage.Lang.variadic_parameter -> VariadicParameterNode(node)
        TSCLanguage.Lang.while_statement -> WhileStatementNode(node)
        TSCLanguage.Lang.character -> CharacterNode(node)
        TSCLanguage.Lang.comment -> CommentNode(node)
        TSCLanguage.Lang.escape_sequence -> EscapeSequenceNode(node)
        TSCLanguage.Lang.`false` -> FalseNode(node)
        TSCLanguage.Lang.field_identifier -> FieldIdentifierNode(node)
        TSCLanguage.Lang.identifier -> IdentifierNode(node)
        TSCLanguage.Lang.ms_restrict_modifier -> MsRestrictModifierNode(node)
        TSCLanguage.Lang.ms_signed_ptr_modifier -> MsSignedPtrModifierNode(node)
        TSCLanguage.Lang.ms_unsigned_ptr_modifier -> MsUnsignedPtrModifierNode(node)
        TSCLanguage.Lang.number_literal -> NumberLiteralNode(node)
        TSCLanguage.Lang.preproc_arg -> PreprocArgNode(node)
        TSCLanguage.Lang.preproc_directive -> PreprocDirectiveNode(node)
        TSCLanguage.Lang.primitive_type -> PrimitiveTypeNode(node)
        TSCLanguage.Lang.statement_identifier -> StatementIdentifierNode(node)
        TSCLanguage.Lang.string_content -> StringContentNode(node)
        TSCLanguage.Lang.system_lib_string -> SystemLibStringNode(node)
        TSCLanguage.Lang.`true` -> TrueNode(node)
        TSCLanguage.Lang.type_identifier -> TypeIdentifierNode(node)
        else -> error("Unknown node type ${node.kind}")
    }
}
